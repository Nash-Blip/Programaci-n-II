@startuml name prototipoTP

abstract class Vehiculo{
    - numMatricula: number
    - estado: EstadoVehiculo
    - datosMantenimiento: DatosMantenimiento
    - datosEstadistica: DatosEstadistica
    - kilometros: number
    - logicaTarifa: Tarifa
    - tarifaBase: number

    --Getters_Y_Setters--
}

class Sedan extends Vehiculo{}
class Suv extends Vehiculo{}
class Compacto extends Vehiculo{}

class Temporada{
    +getTemporada(): string
}

class DatosEstadistica{
    -cantidadDeVecesAlquilado: number
    -ingresosAlquiler: number
    -costosMantenimiento: number

    --Getters_Y_Setters--
    +calcularRentabilidad(): number
}

class Mantenimiento{
    -vehiculo: Vehiculo
    -fecha: Date

    +costoMantenimiento(): number
}

class DatosMantenimiento{
    -kmUltimoMantenimiento: number
    -fechaUltimoMantenimiento: Date 
    -alquileresCantidad: number

    --Getters_Y_Setters--
}

interface Tarifa{
    calcularKm: CalcularKilometros
    calcularTarifa(reserva: Reserva): number
}

class tarifaSuv implements Tarifa{}

class tarifaCompacto implements Tarifa{}

class tarifaSedan implements Tarifa{}

class Reserva{
    -idReserva: number
    -fechaInicio: Fecha
    -fechaFinalizacion: Fecha
    -vehiculo: Vehiculo
    -kmIniciales: number
    -kmFinales: number

    --Getters_Y_Setters--
    +calcularCantidadDias(): number
    +calcularPrecioReserva(): number
}

class CalcularKilometros{
    +promedioKmDiarios(dias: number): number
    +calcularKmTotales(kmIniciales: number, kmFinales: number): number
}

enum EstadoVehiculo{
    EN_MANTENIMIENTO,
    DISPONIBLE,
    EN_ALQUILER,
    NECESITA_LIMPIEZA,
}

class GestionAlquiler{
    -vehiculos: Map<matricula: number, vehiculo>
    -reservas: Map<idReserva: number,Reserva>
    -verificadorDisponibilidad: Disponibilidad
    -controladorDeEstadisticas: Estadistica

    --Getters_Y_Setters--
    -procesarMantenimiento(vehiculo: Vehiculo): boolean
    +procesarReserva(reserva: Reserva): boolean
    +entregarVehiculo(reserva: Reserva): void
    +recibirVehiculo(reserva: Reserva): void
}

class Disponibilidad{
    +estaDisponible(reserva: Reserva, Reserva[]): boolean
}

class Estadistica{
    -vehiculos: Map<Vehiculo>
    + vehiculoMasAlquilado(): Vehiculo
    + menosRentabilidad(): Vehiculo
    + mayorRentabilidad(): Vehiculo
    + cantidadEnAlquiler(): number
    + generarReporte(): void
}


' Relaciones
Vehiculo *-- Tarifa
GestionAlquiler *-- Vehiculo
Disponibilidad *-- Reserva
Reserva *-- CalcularKilometros
GestionAlquiler *-- Disponibilidad
GestionAlquiler <-- Reserva
Vehiculo *-u- datosEstadistica
Vehiculo *-l- datosMantenimiento

@enduml